name: Main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  check:
    name: Checks
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJson(inputs.go-version || '["1.20.x"]') }}
        may-fail: [ false ]

    env:
      GO_VERSION: ${{ matrix.go-version }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go release
        if: env.GO_VERSION != 'tip'
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'
          check-latest: true

      - name: Install development tools
        run: make init

      - name: Check build
        run: make build

      - name: Check files are formatted and no source code changes
        run: |
          make format
          pushd tools && go mod tidy -v
          popd        && go mod tidy -v
          git status
          git diff --exit-code
      - name: Run check-license
        run: |
          # run license checker on configured files
          bin/license-eye -c .licenserc.yaml header check
      - name: Run go-sumtype
        run: bin/go-sumtype ./...

      - name: Run linters
        uses: reviewdog/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.ROBOT_TOKEN || secrets.GITHUB_TOKEN }}
          go_version: ${{ env.GO_VERSION }}
          reporter: github-pr-review
          fail_on_error: true
          cache: false
          golangci_lint_flags: "-c=.golangci.yml"
          golangci_lint_version: v1.51.1 # Version should match specified in Makefile

      - name: Run go-consistent
        env:
          COMMAND: 'bin/go-consistent -pedantic -exclude "tests" ./...'
          REDIRECT: "| bin/reviewdog -f=go-consistent -reporter=github-pr-review -fail-on-error=true"
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.ROBOT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          if out=$( ${{ env.COMMAND }} ); exit_code=$?; [ $exit_code -ne 0 ]; then
            if [ $exit_code -gt 1 ] || ${{ github.event.pull_request == null }}; then
              echo "$out"
              exit $exit_code
            else
              echo "$out" ${{ env.REDIRECT }}
            fi
          else
            echo "$out"
          fi
      - name: Test common API
        run: make test-common

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status
